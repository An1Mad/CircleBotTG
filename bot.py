import asyncio
import os
import logging
import subprocess

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums.chat_action import ChatAction
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode

# üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –∏ —è —Å–¥–µ–ª–∞—é –∏–∑ –Ω–µ–≥–æ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ üé•")


@dp.message(F.video | F.video_note)
async def handle_video(message: types.Message):
    input_file = None
    output_file = None

    try:
        video = message.video or message.video_note
        file_id = video.file_id

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª
        try:
            file = await bot.get_file(file_id)
        except Exception as api_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {api_error}")
            await message.reply(
                "Telegram –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API üò¢\n\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1080p —Å –≤—ã—Å–æ–∫–∏–º –±–∏—Ç—Ä–µ–π—Ç–æ–º)\n"
                "‚Ä¢ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª, –∞ –Ω–µ –∫–∞–∫ –≤–∏–¥–µ–æ\n"
                "‚Ä¢ Telegram Desktop –∏–Ω–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π mp4\n\n"
                "‚úÖ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                "1. –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "2. –ò–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –µ–≥–æ —Å–µ–±–µ –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª, –∞ –ø–æ—Ç–æ–º —Å—é–¥–∞\n"
                "3. –ò–ª–∏ —Å–æ–∂–º–∏ –≤–∏–¥–µ–æ –æ–Ω–ª–∞–π–Ω –∑–¥–µ—Å—å: [tools.rotato.app/compress](https://tools.rotato.app/compress) üíª",
                parse_mode=ParseMode.MARKDOWN
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if file.file_size > 49 * 1024 * 1024:
            await message.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª–µ–µ 49 –ú–ë). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ –∏–ª–∏ —Å–æ–∂–º–∏ üíæ")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–º—ë–Ω
        input_file = f"input_{message.from_user.id}.mp4"
        output_file = f"output_{message.from_user.id}.mp4"

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        await bot.download_file(file.file_path, input_file)

        # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ –≤ –∫—Ä—É–∂–æ–∫ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–≤—É–∫–∞)
        cmd = [
            "ffmpeg",
            "-y",
            "-i", input_file,
            "-t", "60",
            "-vf", "crop='min(in_w, in_h)':'min(in_w, in_h)',scale=480:480",
            "-c:v", "libx264",
            "-profile:v", "main",
            "-level", "3.1",
            "-preset", "veryfast",
            "-c:a", "aac",
            "-b:a", "128k",
            output_file
        ]
        subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_VIDEO_NOTE)
        await message.reply_video_note(FSInputFile(output_file))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ üòî")

    finally:
        for file in [input_file, output_file]:
            if file and os.path.exists(file):
                os.remove(file)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
